"""Implementation of statechart model.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))

class Model:
	"""Implementation of the state machine Model.
	"""

	class State:
		""" State Enum
		"""
		(
			smanual_mode,
			smanual_mode_manual_mode_stopped,
			smanual_mode_manual_mode_moving,
			smanual_mode_manual_mode_accelerate,
			smanual_mode_manual_mode_deaccelerate,
			smanual_mode_manual_mode_turning_right,
			smanual_mode_manual_mode_turning_left,
			sautonomous_mode___logging,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation,
			sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration,
			sautonomous_mode___logging_exploration_pre_exploration,
			sautonomous_mode___logging_exploration_await,
			sautonomous_mode___logging_exploration_cell_forward,
			sautonomous_mode___logging_exploration_update_coords,
			sautonomous_mode___logging_exploration_wall_ahead,
			sautonomous_mode___logging_exploration_left_clear,
			sautonomous_mode___logging_exploration_adjust_rotation,
			sautonomous_mode___logging_exploration_west,
			sautonomous_mode___logging_exploration_east,
			sautonomous_mode___logging_exploration_south,
			sautonomous_mode___logging_exploration_north,
			sautonomous_mode___logging_exploration_finish,
			sautonomous_mode___logging_exploration_final_,
			sautonomous_mode___logging_rotation_calibration_calibrating,
			sautonomous_mode___logging_rotation_calibration_rotate_left,
			sautonomous_mode___logging_rotation_calibration_rotate_right,
			sautonomous_mode___logging_rotation_calibration_stop_calibration,
			sautonomous_mode___logging_orientation_check_check,
			sautonomous_mode___logging_orientation_check_north,
			sautonomous_mode___logging_orientation_check_west,
			sautonomous_mode___logging_orientation_check_south,
			sautonomous_mode___logging_orientation_check_east,
			sprepare,
			null_state
		) = range(39)
	
	
	class UserVar:
		"""Implementation of scope UserVar.
		"""
		
		def __init__(self, statemachine):
			self.limit_degree_high = None
			self.limit_degree_low = None
			self.base_speed = None
			self.base_rotation = None
			self.turn_type = None
			self.limit_type = None
			self.xrow = None
			self.ycol = None
			self.xabs = None
			self.yabs = None
			self.abs_dis = None
			self.user_x = None
			self.user_y = None
			self.row_or_col_changed = None
			self.calibration_increment = None
			self.startprocedure = None
			self.straight_offset = None
			self.aligned = None
			self.orientation = None
			self.current_orientation = None
			self.ave_off = None
			self.off_back = None
			self.straighten = None
			self.turned = None
			
			self.statemachine = statemachine
		
	
	class BaseValues:
		"""Implementation of scope BaseValues.
		"""
		
		def __init__(self, statemachine):
			self.max_speed = None
			self.max_rotation = None
			self.degrees_front = None
			self.degrees_right = None
			self.degrees_back = None
			self.degrees_left = None
			
			self.statemachine = statemachine
		
	
	class Output:
		"""Implementation of scope Output.
		"""
		
		def __init__(self, statemachine):
			self.speed = None
			self.rotation = None
			self.obstacles = None
			self.gems = None
			self.finish = None
			
			self.statemachine = statemachine
		
	
	class Grid:
		"""Implementation of scope Grid.
		"""
		
		def __init__(self, statemachine):
			self.update = None
			self.receive = None
			self.column = None
			self.row = None
			self.orientation = None
			self.visited = None
			self.wall_front = None
			self.wall_right = None
			self.wall_back = None
			self.wall_left = None
			self.grid_size = None
			self.max_col = None
			self.max_row = None
			
			self.statemachine = statemachine
		
	
	class StartPos:
		"""Implementation of scope StartPos.
		"""
		
		def __init__(self, statemachine):
			self.set_zero = None
			self.zero_x = None
			self.zero_y = None
			self.zero_south_degree = None
			self.laser_deg_offset = None
			
			self.statemachine = statemachine
		
	
	class Computer:
		"""Implementation of scope Computer.
		"""
		
		def __init__(self, statemachine):
			self.m_press = None
			self.w_press = None
			self.a_press = None
			self.s_press = None
			self.d_press = None
			self.x_press = None
			
			self.statemachine = statemachine
		
		def raise_m_press(self):
			"""Raise method for event m_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_m_press_call)
			self.statemachine.run_cycle()
		
		def __raise_m_press_call(self):
			"""Raise callback for event m_press.
			"""
			self.m_press = True
		
		def raise_w_press(self):
			"""Raise method for event w_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_w_press_call)
			self.statemachine.run_cycle()
		
		def __raise_w_press_call(self):
			"""Raise callback for event w_press.
			"""
			self.w_press = True
		
		def raise_a_press(self):
			"""Raise method for event a_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_a_press_call)
			self.statemachine.run_cycle()
		
		def __raise_a_press_call(self):
			"""Raise callback for event a_press.
			"""
			self.a_press = True
		
		def raise_s_press(self):
			"""Raise method for event s_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_s_press_call)
			self.statemachine.run_cycle()
		
		def __raise_s_press_call(self):
			"""Raise callback for event s_press.
			"""
			self.s_press = True
		
		def raise_d_press(self):
			"""Raise method for event d_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_d_press_call)
			self.statemachine.run_cycle()
		
		def __raise_d_press_call(self):
			"""Raise callback for event d_press.
			"""
			self.d_press = True
		
		def raise_x_press(self):
			"""Raise method for event x_press.
			"""
			self.statemachine.in_event_queue.put(self.__raise_x_press_call)
			self.statemachine.run_cycle()
		
		def __raise_x_press_call(self):
			"""Raise callback for event x_press.
			"""
			self.x_press = True
		
	
	class Imu:
		"""Implementation of scope Imu.
		"""
		
		def __init__(self, statemachine):
			self.pitch = None
			self.roll = None
			self.yaw = None
			
			self.statemachine = statemachine
		
	
	class Odom:
		"""Implementation of scope Odom.
		"""
		
		def __init__(self, statemachine):
			self.x = None
			self.y = None
			self.z = None
			
			self.statemachine = statemachine
		
	
	class LaserDistance:
		"""Implementation of scope LaserDistance.
		"""
		
		def __init__(self, statemachine):
			self.d0 = None
			self.d90 = None
			self.d180 = None
			self.dm90 = None
			self.dmin = None
			self.min_deg = None
			self.dmax = None
			self.max_deg = None
			self.dmean = None
			self.dfront_min = None
			self.min_deg_f = None
			self.dfront_max = None
			self.max_deg_f = None
			self.dfront_mean = None
			self.dright_min = None
			self.min_deg_r = None
			self.dright_max = None
			self.max_deg_r = None
			self.dright_mean = None
			self.dback_min = None
			self.min_deg_b = None
			self.dback_max = None
			self.max_deg_b = None
			self.dback_mean = None
			self.dleft_min = None
			self.min_deg_l = None
			self.dleft_max = None
			self.max_deg_l = None
			self.dleft_mean = None
			
			self.statemachine = statemachine
		
	
	class LaserIntensity:
		"""Implementation of scope LaserIntensity.
		"""
		
		def __init__(self, statemachine):
			self.i0 = None
			self.i90 = None
			self.i180 = None
			self.im90 = None
			self.ifront_min = None
			self.ifront_max = None
			self.ifront_mean = None
			self.iright_min = None
			self.iright_max = None
			self.iright_mean = None
			self.iback_min = None
			self.iback_max = None
			self.iback_mean = None
			self.ileft_min = None
			self.ileft_max = None
			self.ileft_mean = None
			
			self.statemachine = statemachine
		
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		self.user_var = Model.UserVar(self)
		self.base_values = Model.BaseValues(self)
		self.output = Model.Output(self)
		self.grid = Model.Grid(self)
		self.start_pos = Model.StartPos(self)
		self.computer = Model.Computer(self)
		self.imu = Model.Imu(self)
		self.odom = Model.Odom(self)
		self.laser_distance = Model.LaserDistance(self)
		self.laser_intensity = Model.LaserIntensity(self)
		
		self.operation_callback = None
		
		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = Model.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 4
		for __state_index in range(4):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 3
		
		# initializations:
		self.user_var.limit_degree_high = 0.0
		self.user_var.limit_degree_low = 0.0
		self.user_var.base_speed = 0.05
		self.user_var.base_rotation = 0.2
		self.user_var.turn_type = 0
		self.user_var.limit_type = 0
		self.user_var.xrow = 0
		self.user_var.ycol = 0
		self.user_var.xabs = 0
		self.user_var.yabs = 0
		self.user_var.abs_dis = 0
		self.user_var.user_x = 0
		self.user_var.user_y = 0
		self.user_var.row_or_col_changed = False
		self.user_var.calibration_increment = 1
		self.user_var.startprocedure = True
		self.user_var.straight_offset = 0.0
		self.user_var.aligned = False
		self.user_var.orientation = 0
		self.user_var.current_orientation = 0
		self.user_var.ave_off = 0
		self.user_var.off_back = 0
		self.user_var.straighten = False
		self.user_var.turned = False
		self.base_values.max_speed = 0.5
		self.base_values.max_rotation = 2.84
		self.base_values.degrees_front = 10
		self.base_values.degrees_right = 10
		self.base_values.degrees_back = 10
		self.base_values.degrees_left = 10
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.output.obstacles = 0
		self.output.gems = 0
		self.output.finish = 0
		self.grid.update = False
		self.grid.receive = False
		self.grid.column = 0
		self.grid.row = 0
		self.grid.orientation = 0
		self.grid.visited = False
		self.grid.wall_front = 0
		self.grid.wall_right = 0
		self.grid.wall_back = 0
		self.grid.wall_left = 0
		self.grid.grid_size = 0.48
		self.grid.max_col = 3
		self.grid.max_row = 3
		self.start_pos.set_zero = False
		self.start_pos.zero_x = 0.0
		self.start_pos.zero_y = 0.0
		self.start_pos.zero_south_degree = 0.0
		self.start_pos.laser_deg_offset = 0
		self.imu.pitch = 0.0
		self.imu.roll = 0.0
		self.imu.yaw = 0.0
		self.odom.x = 0.0
		self.odom.y = 0.0
		self.odom.z = 0.0
		self.laser_distance.d0 = 0.0
		self.laser_distance.d90 = 0.0
		self.laser_distance.d180 = 0.0
		self.laser_distance.dm90 = 0.0
		self.laser_distance.dmin = 0.0
		self.laser_distance.min_deg = 0
		self.laser_distance.dmax = 0.0
		self.laser_distance.max_deg = 0
		self.laser_distance.dmean = 0.0
		self.laser_distance.dfront_min = 0.0
		self.laser_distance.min_deg_f = 0
		self.laser_distance.dfront_max = 0.0
		self.laser_distance.max_deg_f = 0
		self.laser_distance.dfront_mean = 0.0
		self.laser_distance.dright_min = 0.0
		self.laser_distance.min_deg_r = 0
		self.laser_distance.dright_max = 0.0
		self.laser_distance.max_deg_r = 0
		self.laser_distance.dright_mean = 0.0
		self.laser_distance.dback_min = 0.0
		self.laser_distance.min_deg_b = 0
		self.laser_distance.dback_max = 0.0
		self.laser_distance.max_deg_b = 0
		self.laser_distance.dback_mean = 0.0
		self.laser_distance.dleft_min = 0.0
		self.laser_distance.min_deg_l = 0
		self.laser_distance.dleft_max = 0.0
		self.laser_distance.max_deg_l = 0
		self.laser_distance.dleft_mean = 0.0
		self.laser_intensity.i0 = 0.0
		self.laser_intensity.i90 = 0.0
		self.laser_intensity.i180 = 0.0
		self.laser_intensity.im90 = 0.0
		self.laser_intensity.ifront_min = 0.0
		self.laser_intensity.ifront_max = 0.0
		self.laser_intensity.ifront_mean = 0.0
		self.laser_intensity.iright_min = 0.0
		self.laser_intensity.iright_max = 0.0
		self.laser_intensity.iright_mean = 0.0
		self.laser_intensity.iback_min = 0.0
		self.laser_intensity.iback_max = 0.0
		self.laser_intensity.iback_mean = 0.0
		self.laser_intensity.ileft_min = 0.0
		self.laser_intensity.ileft_max = 0.0
		self.laser_intensity.ileft_mean = 0.0
		self.__completed = False
		self.__do_completion = False
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.smanual_mode:
			return (self.__state_vector[0] >= self.__State.smanual_mode)\
				and (self.__state_vector[0] <= self.__State.smanual_mode_manual_mode_turning_left)
		if s == self.__State.smanual_mode_manual_mode_stopped:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_stopped
		if s == self.__State.smanual_mode_manual_mode_moving:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_moving
		if s == self.__State.smanual_mode_manual_mode_accelerate:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_accelerate
		if s == self.__State.smanual_mode_manual_mode_deaccelerate:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_deaccelerate
		if s == self.__State.smanual_mode_manual_mode_turning_right:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_turning_right
		if s == self.__State.smanual_mode_manual_mode_turning_left:
			return self.__state_vector[0] == self.__State.smanual_mode_manual_mode_turning_left
		if s == self.__State.sautonomous_mode___logging:
			return (self.__state_vector[0] >= self.__State.sautonomous_mode___logging)\
				and (self.__state_vector[0] <= self.__State.sautonomous_mode___logging_orientation_check_east)
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration:
			return (self.__state_vector[0] >= self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration)\
				and (self.__state_vector[0] <= self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation)
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation
		if s == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration:
			return self.__state_vector[0] == self.__State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration
		if s == self.__State.sautonomous_mode___logging_exploration_pre_exploration:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_pre_exploration
		if s == self.__State.sautonomous_mode___logging_exploration_await:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_await
		if s == self.__State.sautonomous_mode___logging_exploration_cell_forward:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_cell_forward
		if s == self.__State.sautonomous_mode___logging_exploration_update_coords:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_update_coords
		if s == self.__State.sautonomous_mode___logging_exploration_wall_ahead:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_wall_ahead
		if s == self.__State.sautonomous_mode___logging_exploration_left_clear:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_left_clear
		if s == self.__State.sautonomous_mode___logging_exploration_adjust_rotation:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_adjust_rotation
		if s == self.__State.sautonomous_mode___logging_exploration_west:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_west
		if s == self.__State.sautonomous_mode___logging_exploration_east:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_east
		if s == self.__State.sautonomous_mode___logging_exploration_south:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_south
		if s == self.__State.sautonomous_mode___logging_exploration_north:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_north
		if s == self.__State.sautonomous_mode___logging_exploration_finish:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_finish
		if s == self.__State.sautonomous_mode___logging_exploration_final_:
			return self.__state_vector[1] == self.__State.sautonomous_mode___logging_exploration_final_
		if s == self.__State.sautonomous_mode___logging_rotation_calibration_calibrating:
			return self.__state_vector[2] == self.__State.sautonomous_mode___logging_rotation_calibration_calibrating
		if s == self.__State.sautonomous_mode___logging_rotation_calibration_rotate_left:
			return self.__state_vector[2] == self.__State.sautonomous_mode___logging_rotation_calibration_rotate_left
		if s == self.__State.sautonomous_mode___logging_rotation_calibration_rotate_right:
			return self.__state_vector[2] == self.__State.sautonomous_mode___logging_rotation_calibration_rotate_right
		if s == self.__State.sautonomous_mode___logging_rotation_calibration_stop_calibration:
			return self.__state_vector[2] == self.__State.sautonomous_mode___logging_rotation_calibration_stop_calibration
		if s == self.__State.sautonomous_mode___logging_orientation_check_check:
			return self.__state_vector[3] == self.__State.sautonomous_mode___logging_orientation_check_check
		if s == self.__State.sautonomous_mode___logging_orientation_check_north:
			return self.__state_vector[3] == self.__State.sautonomous_mode___logging_orientation_check_north
		if s == self.__State.sautonomous_mode___logging_orientation_check_west:
			return self.__state_vector[3] == self.__State.sautonomous_mode___logging_orientation_check_west
		if s == self.__State.sautonomous_mode___logging_orientation_check_south:
			return self.__state_vector[3] == self.__State.sautonomous_mode___logging_orientation_check_south
		if s == self.__State.sautonomous_mode___logging_orientation_check_east:
			return self.__state_vector[3] == self.__State.sautonomous_mode___logging_orientation_check_east
		if s == self.__State.sprepare:
			return self.__state_vector[0] == self.__State.sprepare
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(3):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	def __entry_action_s_manual_mode_manual_mode_stopped(self):
		"""Entry action for state 'stopped'..
		"""
		self.output.speed = 0.0
		self.output.rotation = 0.0
		
	def __entry_action_s_manual_mode_manual_mode_accelerate(self):
		""".
		"""
		self.output.speed = self.output.speed + 0.1
		self.__completed = True
		
	def __entry_action_s_manual_mode_manual_mode_deaccelerate(self):
		""".
		"""
		self.output.speed = self.output.speed - 0.1
		self.__completed = True
		
	def __entry_action_s_manual_mode_manual_mode_turning_right(self):
		""".
		"""
		self.output.rotation = self.output.rotation - 0.1
		self.__completed = True
		
	def __entry_action_s_manual_mode_manual_mode_turning_left(self):
		""".
		"""
		self.output.rotation = self.output.rotation + 0.1
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep(self):
		"""Entry action for state 'Creep'..
		"""
		self.output.speed = 0.025
		
	def __entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero(self):
		""".
		"""
		self.start_pos.set_zero = True
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_(self):
		"""Entry action for state 'Position in the middle '..
		"""
		self.output.speed = 0.025
		
	def __entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready_(self):
		"""Entry action for state 'Ready!'..
		"""
		self.user_var.startprocedure = False
		self.user_var.user_x = self.odom.x
		self.user_var.user_y = self.odom.y
		self.grid.column = 0
		self.grid.row = 0
		
	def __entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation(self):
		"""Entry action for state 'Adjust rotation'..
		"""
		self.timer_service.set_timer(self, 0, (2 * 1000), False)
		self.user_var.straighten = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_await(self):
		""".
		"""
		self.output.speed = 0.0
		self.output.rotation = 0.0
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_cell_forward(self):
		"""Entry action for state 'cellForward'..
		"""
		self.output.speed = 0.05
		
	def __entry_action_s_autonomous_mode___logging_exploration_update_coords(self):
		"""Entry action for state 'updateCoords'..
		"""
		self.user_var.user_x = self.odom.x
		self.user_var.user_y = self.odom.y
		
	def __entry_action_s_autonomous_mode___logging_exploration_wall_ahead(self):
		"""Entry action for state 'wallAhead'..
		"""
		self.user_var.current_orientation = self.user_var.orientation
		self.output.rotation = -0.5
		
	def __entry_action_s_autonomous_mode___logging_exploration_left_clear(self):
		"""Entry action for state 'leftClear'..
		"""
		self.user_var.current_orientation = self.user_var.orientation
		self.output.rotation = 0.5
		
	def __entry_action_s_autonomous_mode___logging_exploration_adjust_rotation(self):
		"""Entry action for state 'adjustRotation'..
		"""
		self.timer_service.set_timer(self, 1, (2 * 1000), False)
		self.user_var.straighten = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_west(self):
		""".
		"""
		self.grid.wall_front = 1 if self.laser_distance.d0 < self.grid.grid_size else 0
		self.grid.wall_right = 1 if self.laser_distance.d90 < self.grid.grid_size else 0
		self.grid.wall_back = 1 if self.laser_distance.d180 < self.grid.grid_size else 0
		self.grid.wall_left = 1 if self.laser_distance.dm90 < self.grid.grid_size else 0
		self.grid.visited = True
		self.grid.update = True
		self.grid.column = self.grid.column - 1
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_east(self):
		""".
		"""
		self.grid.wall_front = 1 if self.laser_distance.d0 < self.grid.grid_size else 0
		self.grid.wall_right = 1 if self.laser_distance.d90 < self.grid.grid_size else 0
		self.grid.wall_back = 1 if self.laser_distance.d180 < self.grid.grid_size else 0
		self.grid.wall_left = 1 if self.laser_distance.dm90 < self.grid.grid_size else 0
		self.grid.visited = True
		self.grid.update = True
		self.grid.column = self.grid.column + 1
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_south(self):
		""".
		"""
		self.grid.wall_front = 1 if self.laser_distance.d180 < self.grid.grid_size else 0
		self.grid.wall_right = 1 if self.laser_distance.dm90 < self.grid.grid_size else 0
		self.grid.wall_back = 1 if self.laser_distance.d0 < self.grid.grid_size else 0
		self.grid.wall_left = 1 if self.laser_distance.d90 < self.grid.grid_size else 0
		self.grid.visited = True
		self.grid.update = True
		self.grid.row = self.grid.row - 1
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_north(self):
		""".
		"""
		self.grid.wall_front = 1 if self.laser_distance.d180 < self.grid.grid_size else 0
		self.grid.wall_right = 1 if self.laser_distance.dm90 < self.grid.grid_size else 0
		self.grid.wall_back = 1 if self.laser_distance.d0 < self.grid.grid_size else 0
		self.grid.wall_left = 1 if self.laser_distance.d90 < self.grid.grid_size else 0
		self.grid.visited = True
		self.grid.update = True
		self.grid.row = self.grid.row + 1
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_exploration_finish(self):
		""".
		"""
		self.output.finish = 0
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_rotation_calibration_rotate_left(self):
		""".
		"""
		self.output.rotation = (0.05 / ((self.user_var.calibration_increment / 5)))
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_rotation_calibration_rotate_right(self):
		""".
		"""
		self.output.rotation = (-0.05 / ((self.user_var.calibration_increment / 5)))
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_rotation_calibration_stop_calibration(self):
		"""Entry action for state 'Stop Calibration'..
		"""
		self.output.rotation = 0.0
		self.user_var.calibration_increment = 1
		
	def __entry_action_s_autonomous_mode___logging_orientation_check_north(self):
		""".
		"""
		self.user_var.orientation = 0
		self.grid.orientation = 0
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_orientation_check_west(self):
		""".
		"""
		self.user_var.orientation = 3
		self.grid.orientation = 3
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_orientation_check_south(self):
		""".
		"""
		self.user_var.orientation = 2
		self.grid.orientation = 2
		self.__completed = True
		
	def __entry_action_s_autonomous_mode___logging_orientation_check_east(self):
		""".
		"""
		self.user_var.orientation = 1
		self.grid.orientation = 1
		self.__completed = True
		
	def __entry_action_s_prepare(self):
		"""Entry action for state 'prepare'..
		"""
		self.timer_service.set_timer(self, 2, (3 * 1000), False)
		
	def __exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration(self):
		"""Exit action for state 'Calibration'..
		"""
		self.user_var.startprocedure = False
		
	def __exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep(self):
		"""Exit action for state 'Creep'..
		"""
		self.output.speed = 0.0
		
	def __exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_(self):
		"""Exit action for state 'Position in the middle '..
		"""
		self.output.speed = 0.0
		
	def __exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation(self):
		"""Exit action for state 'Adjust rotation'..
		"""
		self.timer_service.unset_timer(self, 0)
		self.user_var.straighten = False
		
	def __exit_action_s_autonomous_mode___logging_exploration_cell_forward(self):
		"""Exit action for state 'cellForward'..
		"""
		self.output.speed = 0.0
		self.user_var.turned = False
		
	def __exit_action_s_autonomous_mode___logging_exploration_wall_ahead(self):
		"""Exit action for state 'wallAhead'..
		"""
		self.output.rotation = 0.0
		
	def __exit_action_s_autonomous_mode___logging_exploration_left_clear(self):
		"""Exit action for state 'leftClear'..
		"""
		self.user_var.turned = True
		self.output.rotation = 0.0
		
	def __exit_action_s_autonomous_mode___logging_exploration_adjust_rotation(self):
		"""Exit action for state 'adjustRotation'..
		"""
		self.timer_service.unset_timer(self, 1)
		self.user_var.straighten = False
		
	def __exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_left(self):
		"""Exit action for state 'rotate left'..
		"""
		self.user_var.calibration_increment = self.user_var.calibration_increment + 1
		
	def __exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_right(self):
		"""Exit action for state 'rotate right'..
		"""
		self.user_var.calibration_increment = self.user_var.calibration_increment + 1
		
	def __exit_action_s_prepare(self):
		"""Exit action for state 'prepare'..
		"""
		self.timer_service.unset_timer(self, 2)
		
	def __enter_sequence_s_manual_mode_default(self):
		"""'default' enter sequence for state Manual Mode.
		"""
		self.__enter_sequence_s_manual_mode_manual_mode_default()
		
	def __enter_sequence_s_manual_mode_manual_mode_stopped_default(self):
		"""'default' enter sequence for state stopped.
		"""
		self.__entry_action_s_manual_mode_manual_mode_stopped()
		self.__state_vector[0] = self.State.smanual_mode_manual_mode_stopped
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_manual_mode_manual_mode_accelerate_default(self):
		"""'default' enter sequence for state accelerate.
		"""
		self.__entry_action_s_manual_mode_manual_mode_accelerate()
		self.__state_vector[0] = self.State.smanual_mode_manual_mode_accelerate
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_manual_mode_manual_mode_deaccelerate_default(self):
		"""'default' enter sequence for state deaccelerate.
		"""
		self.__entry_action_s_manual_mode_manual_mode_deaccelerate()
		self.__state_vector[0] = self.State.smanual_mode_manual_mode_deaccelerate
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_manual_mode_manual_mode_turning_right_default(self):
		"""'default' enter sequence for state turning right.
		"""
		self.__entry_action_s_manual_mode_manual_mode_turning_right()
		self.__state_vector[0] = self.State.smanual_mode_manual_mode_turning_right
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_manual_mode_manual_mode_turning_left_default(self):
		"""'default' enter sequence for state turning left.
		"""
		self.__entry_action_s_manual_mode_manual_mode_turning_left()
		self.__state_vector[0] = self.State.smanual_mode_manual_mode_turning_left
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_default(self):
		"""'default' enter sequence for state Autonomous Mode + Logging.
		"""
		self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_default()
		self.__enter_sequence_s_autonomous_mode___logging_exploration_default()
		self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_default()
		self.__enter_sequence_s_autonomous_mode___logging_orientation_check_default()
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_default(self):
		"""'default' enter sequence for state Calibration.
		"""
		self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_default()
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep_default(self):
		"""'default' enter sequence for state Creep.
		"""
		self.__entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep()
		self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero_default(self):
		"""'default' enter sequence for state Set Zero.
		"""
		self.__entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero()
		self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle__default(self):
		"""'default' enter sequence for state Position in the middle .
		"""
		self.__entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_()
		self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready__default(self):
		"""'default' enter sequence for state Ready!.
		"""
		self.__entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready_()
		self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration_default(self):
		"""'default' enter sequence for state prepare calibration.
		"""
		self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_pre_exploration_default(self):
		"""'default' enter sequence for state pre exploration.
		"""
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_pre_exploration
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_await_default(self):
		"""'default' enter sequence for state await.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_await()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_await
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_cell_forward_default(self):
		"""'default' enter sequence for state cellForward.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_cell_forward()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_cell_forward
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_update_coords_default(self):
		"""'default' enter sequence for state updateCoords.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_update_coords()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_update_coords
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_wall_ahead_default(self):
		"""'default' enter sequence for state wallAhead.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_wall_ahead()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_wall_ahead
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_left_clear_default(self):
		"""'default' enter sequence for state leftClear.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_left_clear()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_left_clear
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_adjust_rotation_default(self):
		"""'default' enter sequence for state adjustRotation.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_adjust_rotation()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_adjust_rotation
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_west_default(self):
		"""'default' enter sequence for state West.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_west()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_west
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_east_default(self):
		"""'default' enter sequence for state East.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_east()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_east
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_south_default(self):
		"""'default' enter sequence for state South.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_south()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_south
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_north_default(self):
		"""'default' enter sequence for state North.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_north()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_north
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_finish_default(self):
		"""'default' enter sequence for state finish.
		"""
		self.__entry_action_s_autonomous_mode___logging_exploration_finish()
		self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_finish
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating_default(self):
		"""'default' enter sequence for state calibrating.
		"""
		self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_calibrating
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_left_default(self):
		"""'default' enter sequence for state rotate left.
		"""
		self.__entry_action_s_autonomous_mode___logging_rotation_calibration_rotate_left()
		self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_rotate_left
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_right_default(self):
		"""'default' enter sequence for state rotate right.
		"""
		self.__entry_action_s_autonomous_mode___logging_rotation_calibration_rotate_right()
		self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_rotate_right
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration_default(self):
		"""'default' enter sequence for state Stop Calibration.
		"""
		self.__entry_action_s_autonomous_mode___logging_rotation_calibration_stop_calibration()
		self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_stop_calibration
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_check_default(self):
		"""'default' enter sequence for state Check.
		"""
		self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_check
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_north_default(self):
		"""'default' enter sequence for state North.
		"""
		self.__entry_action_s_autonomous_mode___logging_orientation_check_north()
		self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_north
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_west_default(self):
		"""'default' enter sequence for state West.
		"""
		self.__entry_action_s_autonomous_mode___logging_orientation_check_west()
		self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_west
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_south_default(self):
		"""'default' enter sequence for state South.
		"""
		self.__entry_action_s_autonomous_mode___logging_orientation_check_south()
		self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_south
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_east_default(self):
		"""'default' enter sequence for state East.
		"""
		self.__entry_action_s_autonomous_mode___logging_orientation_check_east()
		self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_east
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_prepare_default(self):
		"""'default' enter sequence for state prepare.
		"""
		self.__entry_action_s_prepare()
		self.__state_vector[0] = self.State.sprepare
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_s_default(self):
		"""'default' enter sequence for region s.
		"""
		self.__react_s__entry_default()
		
	def __enter_sequence_s_manual_mode_manual_mode_default(self):
		"""'default' enter sequence for region Manual Mode.
		"""
		self.__react_s_manual_mode_manual_mode__entry_default()
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_default(self):
		"""'default' enter sequence for region Calibration on entry to the maze.
		"""
		self.__react_s_autonomous_mode___logging_calibration_on_entry_to_the_maze__entry_default()
		
	def __enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_default(self):
		"""'default' enter sequence for region .
		"""
		self.__react_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0__entry_default()
		
	def __enter_sequence_s_autonomous_mode___logging_exploration_default(self):
		"""'default' enter sequence for region Exploration.
		"""
		self.__react_s_autonomous_mode___logging_exploration__entry_default()
		
	def __enter_sequence_s_autonomous_mode___logging_rotation_calibration_default(self):
		"""'default' enter sequence for region RotationCalibration.
		"""
		self.__react_s_autonomous_mode___logging_rotation_calibration__entry_default()
		
	def __enter_sequence_s_autonomous_mode___logging_orientation_check_default(self):
		"""'default' enter sequence for region OrientationCheck.
		"""
		self.__react_s_autonomous_mode___logging_orientation_check__entry_default()
		
	def __exit_sequence_s_manual_mode(self):
		"""Default exit sequence for state Manual Mode.
		"""
		self.__exit_sequence_s_manual_mode_manual_mode()
		
	def __exit_sequence_s_manual_mode_manual_mode_stopped(self):
		"""Default exit sequence for state stopped.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_manual_mode_manual_mode_moving(self):
		"""Default exit sequence for state moving.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_manual_mode_manual_mode_accelerate(self):
		"""Default exit sequence for state accelerate.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_manual_mode_manual_mode_deaccelerate(self):
		"""Default exit sequence for state deaccelerate.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_manual_mode_manual_mode_turning_right(self):
		"""Default exit sequence for state turning right.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_manual_mode_manual_mode_turning_left(self):
		"""Default exit sequence for state turning left.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_autonomous_mode___logging(self):
		"""Default exit sequence for state Autonomous Mode + Logging.
		"""
		self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze()
		self.__exit_sequence_s_autonomous_mode___logging_exploration()
		self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration()
		self.__exit_sequence_s_autonomous_mode___logging_orientation_check()
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep(self):
		"""Default exit sequence for state Creep.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep()
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero(self):
		"""Default exit sequence for state Set Zero.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_(self):
		"""Default exit sequence for state Position in the middle .
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_()
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready_(self):
		"""Default exit sequence for state Ready!.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation(self):
		"""Default exit sequence for state Adjust rotation.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation()
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration(self):
		"""Default exit sequence for state prepare calibration.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_pre_exploration(self):
		"""Default exit sequence for state pre exploration.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_await(self):
		"""Default exit sequence for state await.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_cell_forward(self):
		"""Default exit sequence for state cellForward.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_s_autonomous_mode___logging_exploration_cell_forward()
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_update_coords(self):
		"""Default exit sequence for state updateCoords.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_wall_ahead(self):
		"""Default exit sequence for state wallAhead.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_s_autonomous_mode___logging_exploration_wall_ahead()
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_left_clear(self):
		"""Default exit sequence for state leftClear.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_s_autonomous_mode___logging_exploration_left_clear()
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_adjust_rotation(self):
		"""Default exit sequence for state adjustRotation.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_s_autonomous_mode___logging_exploration_adjust_rotation()
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_west(self):
		"""Default exit sequence for state West.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_east(self):
		"""Default exit sequence for state East.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_south(self):
		"""Default exit sequence for state South.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_north(self):
		"""Default exit sequence for state North.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration_finish(self):
		"""Default exit sequence for state finish.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_exploration__final_(self):
		"""Default exit sequence for final state..
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating(self):
		"""Default exit sequence for state calibrating.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_left(self):
		"""Default exit sequence for state rotate left.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		self.__exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_left()
		
	def __exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_right(self):
		"""Default exit sequence for state rotate right.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		self.__exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_right()
		
	def __exit_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration(self):
		"""Default exit sequence for state Stop Calibration.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check_check(self):
		"""Default exit sequence for state Check.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check_north(self):
		"""Default exit sequence for state North.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check_west(self):
		"""Default exit sequence for state West.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check_south(self):
		"""Default exit sequence for state South.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check_east(self):
		"""Default exit sequence for state East.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		
	def __exit_sequence_s_prepare(self):
		"""Default exit sequence for state prepare.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_s_prepare()
		
	def __exit_sequence_s(self):
		"""Default exit sequence for region s.
		"""
		state = self.__state_vector[0]
		if state == self.State.smanual_mode_manual_mode_stopped:
			self.__exit_sequence_s_manual_mode_manual_mode_stopped()
		elif state == self.State.smanual_mode_manual_mode_moving:
			self.__exit_sequence_s_manual_mode_manual_mode_moving()
		elif state == self.State.smanual_mode_manual_mode_accelerate:
			self.__exit_sequence_s_manual_mode_manual_mode_accelerate()
		elif state == self.State.smanual_mode_manual_mode_deaccelerate:
			self.__exit_sequence_s_manual_mode_manual_mode_deaccelerate()
		elif state == self.State.smanual_mode_manual_mode_turning_right:
			self.__exit_sequence_s_manual_mode_manual_mode_turning_right()
		elif state == self.State.smanual_mode_manual_mode_turning_left:
			self.__exit_sequence_s_manual_mode_manual_mode_turning_left()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready_()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration()
		elif state == self.State.sprepare:
			self.__exit_sequence_s_prepare()
		state = self.__state_vector[1]
		if state == self.State.sautonomous_mode___logging_exploration_pre_exploration:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_pre_exploration()
		elif state == self.State.sautonomous_mode___logging_exploration_await:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_await()
		elif state == self.State.sautonomous_mode___logging_exploration_cell_forward:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_cell_forward()
		elif state == self.State.sautonomous_mode___logging_exploration_update_coords:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
		elif state == self.State.sautonomous_mode___logging_exploration_wall_ahead:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_wall_ahead()
		elif state == self.State.sautonomous_mode___logging_exploration_left_clear:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_left_clear()
		elif state == self.State.sautonomous_mode___logging_exploration_adjust_rotation:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_adjust_rotation()
		elif state == self.State.sautonomous_mode___logging_exploration_west:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_west()
		elif state == self.State.sautonomous_mode___logging_exploration_east:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_east()
		elif state == self.State.sautonomous_mode___logging_exploration_south:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_south()
		elif state == self.State.sautonomous_mode___logging_exploration_north:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_north()
		elif state == self.State.sautonomous_mode___logging_exploration_finish:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_finish()
		elif state == self.State.sautonomous_mode___logging_exploration_final_:
			self.__exit_sequence_s_autonomous_mode___logging_exploration__final_()
		state = self.__state_vector[2]
		if state == self.State.sautonomous_mode___logging_rotation_calibration_calibrating:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_left:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_left()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_right:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_right()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_stop_calibration:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration()
		state = self.__state_vector[3]
		if state == self.State.sautonomous_mode___logging_orientation_check_check:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
		elif state == self.State.sautonomous_mode___logging_orientation_check_north:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_north()
		elif state == self.State.sautonomous_mode___logging_orientation_check_west:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_west()
		elif state == self.State.sautonomous_mode___logging_orientation_check_south:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_south()
		elif state == self.State.sautonomous_mode___logging_orientation_check_east:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_east()
		
	def __exit_sequence_s_manual_mode_manual_mode(self):
		"""Default exit sequence for region Manual Mode.
		"""
		state = self.__state_vector[0]
		if state == self.State.smanual_mode_manual_mode_stopped:
			self.__exit_sequence_s_manual_mode_manual_mode_stopped()
		elif state == self.State.smanual_mode_manual_mode_moving:
			self.__exit_sequence_s_manual_mode_manual_mode_moving()
		elif state == self.State.smanual_mode_manual_mode_accelerate:
			self.__exit_sequence_s_manual_mode_manual_mode_accelerate()
		elif state == self.State.smanual_mode_manual_mode_deaccelerate:
			self.__exit_sequence_s_manual_mode_manual_mode_deaccelerate()
		elif state == self.State.smanual_mode_manual_mode_turning_right:
			self.__exit_sequence_s_manual_mode_manual_mode_turning_right()
		elif state == self.State.smanual_mode_manual_mode_turning_left:
			self.__exit_sequence_s_manual_mode_manual_mode_turning_left()
		
	def __exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze(self):
		"""Default exit sequence for region Calibration on entry to the maze.
		"""
		state = self.__state_vector[0]
		if state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready_()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation()
			self.__exit_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration()
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration:
			self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration()
		
	def __exit_sequence_s_autonomous_mode___logging_exploration(self):
		"""Default exit sequence for region Exploration.
		"""
		state = self.__state_vector[1]
		if state == self.State.sautonomous_mode___logging_exploration_pre_exploration:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_pre_exploration()
		elif state == self.State.sautonomous_mode___logging_exploration_await:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_await()
		elif state == self.State.sautonomous_mode___logging_exploration_cell_forward:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_cell_forward()
		elif state == self.State.sautonomous_mode___logging_exploration_update_coords:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
		elif state == self.State.sautonomous_mode___logging_exploration_wall_ahead:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_wall_ahead()
		elif state == self.State.sautonomous_mode___logging_exploration_left_clear:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_left_clear()
		elif state == self.State.sautonomous_mode___logging_exploration_adjust_rotation:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_adjust_rotation()
		elif state == self.State.sautonomous_mode___logging_exploration_west:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_west()
		elif state == self.State.sautonomous_mode___logging_exploration_east:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_east()
		elif state == self.State.sautonomous_mode___logging_exploration_south:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_south()
		elif state == self.State.sautonomous_mode___logging_exploration_north:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_north()
		elif state == self.State.sautonomous_mode___logging_exploration_finish:
			self.__exit_sequence_s_autonomous_mode___logging_exploration_finish()
		elif state == self.State.sautonomous_mode___logging_exploration_final_:
			self.__exit_sequence_s_autonomous_mode___logging_exploration__final_()
		
	def __exit_sequence_s_autonomous_mode___logging_rotation_calibration(self):
		"""Default exit sequence for region RotationCalibration.
		"""
		state = self.__state_vector[2]
		if state == self.State.sautonomous_mode___logging_rotation_calibration_calibrating:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_left:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_left()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_right:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_right()
		elif state == self.State.sautonomous_mode___logging_rotation_calibration_stop_calibration:
			self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration()
		
	def __exit_sequence_s_autonomous_mode___logging_orientation_check(self):
		"""Default exit sequence for region OrientationCheck.
		"""
		state = self.__state_vector[3]
		if state == self.State.sautonomous_mode___logging_orientation_check_check:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
		elif state == self.State.sautonomous_mode___logging_orientation_check_north:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_north()
		elif state == self.State.sautonomous_mode___logging_orientation_check_west:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_west()
		elif state == self.State.sautonomous_mode___logging_orientation_check_south:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_south()
		elif state == self.State.sautonomous_mode___logging_orientation_check_east:
			self.__exit_sequence_s_autonomous_mode___logging_orientation_check_east()
		
	def __react_s_manual_mode_manual_mode__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_manual_mode_manual_mode_stopped_default()
		
	def __react_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep_default()
		
	def __react_s_autonomous_mode___logging_calibration_on_entry_to_the_maze__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration_default()
		
	def __react_s_autonomous_mode___logging_exploration__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_autonomous_mode___logging_exploration_pre_exploration_default()
		
	def __react_s_autonomous_mode___logging_rotation_calibration__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating_default()
		
	def __react_s_autonomous_mode___logging_orientation_check__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_autonomous_mode___logging_orientation_check_check_default()
		
	def __react_s__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_s_prepare_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __s_manual_mode_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_s_manual_mode()
					self.__enter_sequence_s_autonomous_mode___logging_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_stopped_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_stopped_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.a_press:
					self.__exit_sequence_s_manual_mode_manual_mode_stopped()
					self.__enter_sequence_s_manual_mode_manual_mode_turning_left_default()
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_s_manual_mode_manual_mode_stopped()
					self.__enter_sequence_s_manual_mode_manual_mode_turning_right_default()
					transitioned_after = 0
				elif self.computer.w_press:
					self.__exit_sequence_s_manual_mode_manual_mode_stopped()
					self.__enter_sequence_s_manual_mode_manual_mode_accelerate_default()
					transitioned_after = 0
				elif self.computer.x_press:
					self.__exit_sequence_s_manual_mode_manual_mode_stopped()
					self.__enter_sequence_s_manual_mode_manual_mode_deaccelerate_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_moving_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_moving_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.x_press:
					self.__exit_sequence_s_manual_mode_manual_mode_moving()
					self.__enter_sequence_s_manual_mode_manual_mode_deaccelerate_default()
					transitioned_after = 0
				elif self.computer.w_press:
					self.__exit_sequence_s_manual_mode_manual_mode_moving()
					self.__enter_sequence_s_manual_mode_manual_mode_accelerate_default()
					transitioned_after = 0
				elif self.computer.s_press:
					self.__exit_sequence_s_manual_mode_manual_mode_moving()
					self.__enter_sequence_s_manual_mode_manual_mode_stopped_default()
					transitioned_after = 0
				elif self.computer.d_press:
					self.__exit_sequence_s_manual_mode_manual_mode_moving()
					self.__enter_sequence_s_manual_mode_manual_mode_turning_right_default()
					transitioned_after = 0
				elif self.computer.a_press:
					self.__exit_sequence_s_manual_mode_manual_mode_moving()
					self.__enter_sequence_s_manual_mode_manual_mode_turning_left_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_accelerate_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_accelerate_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if self.__do_completion:
			self.__state_vector[0] = self.State.null_state
			self.__state_conf_vector_position = 0
			self.__state_vector[0] = self.State.smanual_mode_manual_mode_moving
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_deaccelerate_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_deaccelerate_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if self.__do_completion:
			self.__state_vector[0] = self.State.null_state
			self.__state_conf_vector_position = 0
			self.__state_vector[0] = self.State.smanual_mode_manual_mode_moving
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_turning_right_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_turning_right_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if self.__do_completion:
			self.__state_vector[0] = self.State.null_state
			self.__state_conf_vector_position = 0
			self.__state_vector[0] = self.State.smanual_mode_manual_mode_moving
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_manual_mode_manual_mode_turning_left_react(self, transitioned_before):
		"""Implementation of __s_manual_mode_manual_mode_turning_left_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_manual_mode_react(transitioned_before)
		if self.__do_completion:
			self.__state_vector[0] = self.State.null_state
			self.__state_conf_vector_position = 0
			self.__state_vector[0] = self.State.smanual_mode_manual_mode_moving
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.computer.m_press:
					self.__exit_sequence_s_autonomous_mode___logging()
					self.__enter_sequence_s_manual_mode_default()
					transitioned_after = 3
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_react(transitioned_before)
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.laser_distance.d90 < ((self.grid.grid_size * 2)) and self.laser_distance.dm90 < ((self.grid.grid_size * 2)):
					self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep()
					self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(transitioned_before)
		if self.__do_completion:
			self.__state_vector[0] = self.State.null_state
			self.__state_conf_vector_position = 0
			self.__entry_action_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation()
			self.__state_vector[0] = self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation
			self.__state_conf_vector_position = 0
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle__react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle__react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if ((self.start_pos.zero_x + ((self.grid.grid_size / 2))) <= self.odom.x) or ((self.start_pos.zero_x - ((self.grid.grid_size / 2))) >= self.odom.x) or ((self.start_pos.zero_y + ((self.grid.grid_size / 2))) <= self.odom.y) or ((self.start_pos.zero_y - ((self.grid.grid_size / 2))) >= self.odom.y):
					self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle_()
					self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready__default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready__react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready__react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(transitioned_before)
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.__time_events[0]:
					self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation()
					self.__time_events[0] = False
					self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle__default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__s_autonomous_mode___logging_react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.user_var.startprocedure:
					self.__exit_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration()
					self.__enter_sequence_s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_pre_exploration_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_pre_exploration_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if not self.user_var.startprocedure:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_pre_exploration()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_await_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_await_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_await_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			if self.laser_distance.d90 > self.grid.grid_size and not self.user_var.turned:
				self.__enter_sequence_s_autonomous_mode___logging_exploration_left_clear_default()
			elif self.laser_distance.d0 < self.grid.grid_size:
				self.__enter_sequence_s_autonomous_mode___logging_exploration_wall_ahead_default()
			else:
				self.__enter_sequence_s_autonomous_mode___logging_exploration_cell_forward_default()
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_cell_forward_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_cell_forward_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if ((self.user_var.user_x + (self.grid.grid_size)) <= self.odom.x) or ((self.user_var.user_x - (self.grid.grid_size)) >= self.odom.x) or ((self.user_var.user_y + (self.grid.grid_size)) <= self.odom.y) or ((self.user_var.user_y - (self.grid.grid_size)) >= self.odom.y):
					self.__exit_sequence_s_autonomous_mode___logging_exploration_cell_forward()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_update_coords_default()
					transitioned_after = 1
				elif self.odom.x <= self.start_pos.zero_x:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_cell_forward()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_finish_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_update_coords_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_update_coords_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.user_var.orientation == 0:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_north_default()
					transitioned_after = 1
				elif self.user_var.orientation == 3:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_west_default()
					transitioned_after = 1
				elif self.user_var.orientation == 1:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_east_default()
					transitioned_after = 1
				elif self.user_var.orientation == 2:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_update_coords()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_south_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_wall_ahead_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_wall_ahead_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if (self.user_var.current_orientation != self.grid.orientation):
					self.__exit_sequence_s_autonomous_mode___logging_exploration_wall_ahead()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_adjust_rotation_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_left_clear_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_left_clear_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if (self.user_var.current_orientation != self.grid.orientation):
					self.__exit_sequence_s_autonomous_mode___logging_exploration_left_clear()
					self.__enter_sequence_s_autonomous_mode___logging_exploration_adjust_rotation_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_adjust_rotation_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_adjust_rotation_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 1:
				if self.__time_events[1]:
					self.__exit_sequence_s_autonomous_mode___logging_exploration_adjust_rotation()
					self.__time_events[1] = False
					self.__enter_sequence_s_autonomous_mode___logging_exploration_await_default()
					transitioned_after = 1
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_west_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_west_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__entry_action_s_autonomous_mode___logging_exploration_await()
			self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_await
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_east_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_east_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__entry_action_s_autonomous_mode___logging_exploration_await()
			self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_await
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_south_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_south_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__entry_action_s_autonomous_mode___logging_exploration_await()
			self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_await
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_north_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_north_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__entry_action_s_autonomous_mode___logging_exploration_await()
			self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_await
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration_finish_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration_finish_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[1] = self.State.null_state
			self.__state_conf_vector_position = 1
			self.__state_vector[1] = self.State.sautonomous_mode___logging_exploration_final_
			self.__state_conf_vector_position = 1
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_exploration__final__react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_exploration__final__react function.
		"""
		transitioned_after = transitioned_before
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_rotation_calibration_calibrating_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_rotation_calibration_calibrating_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if ((self.imu.yaw > -45.0 and self.imu.yaw < 0.0) or (self.imu.yaw > -135.0 and self.imu.yaw < -90.0) or (self.imu.yaw > 135.0 and self.imu.yaw < -180.0) or (self.imu.yaw > 45.0 and self.imu.yaw < 90.0) or (175 < self.imu.yaw and self.imu.yaw < 180)) and self.user_var.straighten:
					self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating()
					self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_left_default()
					transitioned_after = 2
				elif ((self.imu.yaw > 0.0 and self.imu.yaw < 45.0) or (self.imu.yaw > -90.0 and self.imu.yaw < -45.0) or (self.imu.yaw > -180 and self.imu.yaw < -135.0) or (self.imu.yaw > 90.0 and self.imu.yaw < 135.0) or (-180 < self.imu.yaw and self.imu.yaw < -175)) and self.user_var.straighten:
					self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating()
					self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_rotate_right_default()
					transitioned_after = 2
				elif not self.user_var.straighten:
					self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating()
					self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration_default()
					transitioned_after = 2
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_rotation_calibration_rotate_left_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_rotation_calibration_rotate_left_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[2] = self.State.null_state
			self.__state_conf_vector_position = 2
			self.__exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_left()
			self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_calibrating
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_rotation_calibration_rotate_right_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_rotation_calibration_rotate_right_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[2] = self.State.null_state
			self.__state_conf_vector_position = 2
			self.__exit_action_s_autonomous_mode___logging_rotation_calibration_rotate_right()
			self.__state_vector[2] = self.State.sautonomous_mode___logging_rotation_calibration_calibrating
			self.__state_conf_vector_position = 2
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_rotation_calibration_stop_calibration_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_rotation_calibration_stop_calibration_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 2:
				if self.user_var.straighten:
					self.__exit_sequence_s_autonomous_mode___logging_rotation_calibration_stop_calibration()
					self.__enter_sequence_s_autonomous_mode___logging_rotation_calibration_calibrating_default()
					transitioned_after = 2
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_orientation_check_check_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_orientation_check_check_react function.
		"""
		transitioned_after = transitioned_before
		if not self.__do_completion:
			if transitioned_after < 3:
				if self.imu.yaw > -5 and self.imu.yaw < 5:
					self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
					self.__enter_sequence_s_autonomous_mode___logging_orientation_check_north_default()
					transitioned_after = 3
				elif self.imu.yaw > 85 and self.imu.yaw < 95:
					self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
					self.__enter_sequence_s_autonomous_mode___logging_orientation_check_west_default()
					transitioned_after = 3
				elif (self.imu.yaw < -175 and self.imu.yaw > -180) or (self.imu.yaw > 175 and self.imu.yaw < 180):
					self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
					self.__enter_sequence_s_autonomous_mode___logging_orientation_check_south_default()
					transitioned_after = 3
				elif self.imu.yaw < -85 and self.imu.yaw > -95:
					self.__exit_sequence_s_autonomous_mode___logging_orientation_check_check()
					self.__enter_sequence_s_autonomous_mode___logging_orientation_check_east_default()
					transitioned_after = 3
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_orientation_check_north_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_orientation_check_north_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[3] = self.State.null_state
			self.__state_conf_vector_position = 3
			self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_check
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_orientation_check_west_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_orientation_check_west_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[3] = self.State.null_state
			self.__state_conf_vector_position = 3
			self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_check
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_orientation_check_south_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_orientation_check_south_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[3] = self.State.null_state
			self.__state_conf_vector_position = 3
			self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_check
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_autonomous_mode___logging_orientation_check_east_react(self, transitioned_before):
		"""Implementation of __s_autonomous_mode___logging_orientation_check_east_react function.
		"""
		transitioned_after = transitioned_before
		if self.__do_completion:
			self.__state_vector[3] = self.State.null_state
			self.__state_conf_vector_position = 3
			self.__state_vector[3] = self.State.sautonomous_mode___logging_orientation_check_check
			self.__state_conf_vector_position = 3
			self.__state_conf_vector_changed = True
		return transitioned_after
	
	
	def __s_prepare_react(self, transitioned_before):
		"""Implementation of __s_prepare_react function.
		"""
		transitioned_after = transitioned_before
		transitioned_after = self.__react(transitioned_before)
		if not self.__do_completion:
			if transitioned_after < 0:
				if self.__time_events[2]:
					self.__exit_sequence_s_prepare()
					self.__time_events[2] = False
					self.__enter_sequence_s_manual_mode_default()
					transitioned_after = 0
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.computer.m_press = False
		self.computer.w_press = False
		self.computer.a_press = False
		self.computer.s_press = False
		self.computer.d_press = False
		self.computer.x_press = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.smanual_mode_manual_mode_stopped:
			transitioned = self.__s_manual_mode_manual_mode_stopped_react(transitioned)
		elif state == self.State.smanual_mode_manual_mode_moving:
			transitioned = self.__s_manual_mode_manual_mode_moving_react(transitioned)
		elif state == self.State.smanual_mode_manual_mode_accelerate:
			transitioned = self.__s_manual_mode_manual_mode_accelerate_react(transitioned)
		elif state == self.State.smanual_mode_manual_mode_deaccelerate:
			transitioned = self.__s_manual_mode_manual_mode_deaccelerate_react(transitioned)
		elif state == self.State.smanual_mode_manual_mode_turning_right:
			transitioned = self.__s_manual_mode_manual_mode_turning_right_react(transitioned)
		elif state == self.State.smanual_mode_manual_mode_turning_left:
			transitioned = self.__s_manual_mode_manual_mode_turning_left_react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0creep:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_creep_react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0set_zero:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_set_zero_react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0position_in_the_middle_:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_position_in_the_middle__react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0ready_:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_ready__react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_calibration_region0adjust_rotation:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_calibration__region0_adjust_rotation_react(transitioned)
		elif state == self.State.sautonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration:
			transitioned = self.__s_autonomous_mode___logging_calibration_on_entry_to_the_maze_prepare_calibration_react(transitioned)
		elif state == self.State.sprepare:
			transitioned = self.__s_prepare_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.sautonomous_mode___logging_exploration_pre_exploration:
				transitioned = self.__s_autonomous_mode___logging_exploration_pre_exploration_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_await:
				transitioned = self.__s_autonomous_mode___logging_exploration_await_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_cell_forward:
				transitioned = self.__s_autonomous_mode___logging_exploration_cell_forward_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_update_coords:
				transitioned = self.__s_autonomous_mode___logging_exploration_update_coords_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_wall_ahead:
				transitioned = self.__s_autonomous_mode___logging_exploration_wall_ahead_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_left_clear:
				transitioned = self.__s_autonomous_mode___logging_exploration_left_clear_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_adjust_rotation:
				transitioned = self.__s_autonomous_mode___logging_exploration_adjust_rotation_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_west:
				transitioned = self.__s_autonomous_mode___logging_exploration_west_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_east:
				transitioned = self.__s_autonomous_mode___logging_exploration_east_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_south:
				transitioned = self.__s_autonomous_mode___logging_exploration_south_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_north:
				transitioned = self.__s_autonomous_mode___logging_exploration_north_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_finish:
				transitioned = self.__s_autonomous_mode___logging_exploration_finish_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_exploration_final_:
				transitioned = self.__s_autonomous_mode___logging_exploration__final__react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.sautonomous_mode___logging_rotation_calibration_calibrating:
				transitioned = self.__s_autonomous_mode___logging_rotation_calibration_calibrating_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_left:
				transitioned = self.__s_autonomous_mode___logging_rotation_calibration_rotate_left_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_rotation_calibration_rotate_right:
				transitioned = self.__s_autonomous_mode___logging_rotation_calibration_rotate_right_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_rotation_calibration_stop_calibration:
				transitioned = self.__s_autonomous_mode___logging_rotation_calibration_stop_calibration_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.sautonomous_mode___logging_orientation_check_check:
				self.__s_autonomous_mode___logging_orientation_check_check_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_orientation_check_north:
				self.__s_autonomous_mode___logging_orientation_check_north_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_orientation_check_west:
				self.__s_autonomous_mode___logging_orientation_check_west_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_orientation_check_south:
				self.__s_autonomous_mode___logging_orientation_check_south_react(transitioned)
			elif state == self.State.sautonomous_mode___logging_orientation_check_east:
				self.__s_autonomous_mode___logging_orientation_check_east_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__do_completion = False
			condition_1 = True
			while condition_1:
				if self.__completed:
					self.__do_completion = True
				self.__completed = False
				self.__micro_step()
				self.__do_completion = False
				condition_1 = self.__completed
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.computer.m_press or self.computer.w_press or self.computer.a_press or self.computer.s_press or self.computer.d_press or self.computer.x_press or self.__time_events[0] or self.__time_events[1] or self.__time_events[2]
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_s_default()
		self.__do_completion = False
		condition_0 = True
		while condition_0:
			if self.__completed:
				self.__do_completion = True
			self.__completed = False
			self.__micro_step()
			self.__do_completion = False
			condition_0 = self.__completed
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_s()
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
